==================
Matching enums
==================

match payload {
  Payload::Plain => print("Plain text"),
  Payload::Rich => {
    // block
    print("Rich text")
  },
  other => print("Unknown")
}

---

(program
  (statement
    (expression
      (match_expression
        (expression
          (identifier))
        (match_case
          (member_access
            (expression
              (identifier))
            (double_colon)
            (identifier))
          (expression
            (function_call
              (identifier)
              (paren_arguments
                (expression
                  (primitive_value
                    (string
                      (string_content))))))))
        (match_case
          (member_access
            (expression
              (identifier))
            (double_colon)
            (identifier))
          (block
            (statement
              (comment))
            (statement
              (expression
                (function_call
                  (identifier)
                  (paren_arguments
                    (expression
                      (primitive_value
                        (string
                          (string_content))))))))))
        (match_case
          (identifier)
          (expression
            (function_call
              (identifier)
              (paren_arguments
                (expression
                  (primitive_value
                    (string
                      (string_content))))))))))))

==================
Matching booleans
==================

match boolean {
  true => "yep",
  false => "nope"
}

---

(program
  (statement
    (expression
      (match_expression
        (expression
          (identifier))
        (match_case
          (primitive_value
            (boolean))
          (expression
            (primitive_value
              (string
                (string_content)))))
        (match_case
          (primitive_value
            (boolean))
          (expression
            (primitive_value
              (string
                (string_content)))))))))

==================
Matching ints
==================

match number {
  0 => "zero",
  1 => "one",
  2 => "a couple",
  3..5 => "a few",
  6..10 => "several",
  _ => "a ton"
}

---

(program
  (statement
    (expression
      (match_expression
        (expression
          (identifier))
        (match_case
          (primitive_value
            (number))
          (expression
            (primitive_value
              (string
                (string_content)))))
        (match_case
          (primitive_value
            (number))
          (expression
            (primitive_value
              (string
                (string_content)))))
        (match_case
          (primitive_value
            (number))
          (expression
            (primitive_value
              (string
                (string_content)))))
        (match_case
          (range_expression
            (expression
              (primitive_value
                (number)))
            (inclusive_range)
            (expression
              (primitive_value
                (number))))
          (expression
            (primitive_value
              (string
                (string_content)))))
        (match_case
          (range_expression
            (expression
              (primitive_value
                (number)))
            (inclusive_range)
            (expression
              (primitive_value
                (number))))
          (expression
            (primitive_value
              (string
                (string_content)))))
        (match_case
          (wildcard)
          (expression
            (primitive_value
              (string
                (string_content)))))))))
