==================
basic struct usage
==================

struct Person {
	name: Str,
	age: Int,
	employed: Bool,
}

let john = Person {	name: "John", age: 30, employed: true }
let people: [Person] = [
  john,
  Person {	name: "Alice", age: age_value, employed: true }
]

---

(program
  (statement
    (struct_definition
      name: (identifier)
      field: (struct_property
        name: (identifier)
        type: (type
          (primitive_type
            (str))))
      field: (struct_property
        name: (identifier)
        type: (type
          (primitive_type
            (int))))
      field: (struct_property
        name: (identifier)
        type: (type
          (primitive_type
            (bool))))))
  (statement
    (variable_definition
      binding: (variable_binding)
      name: (identifier)
      (assign)
      value: (expression
        expr: (struct_instance
          name: (identifier)
          field: (struct_prop_pair
            name: (identifier)
            value: (expression
              expr: (primitive_value
                primitive: (string
                  chunk: (string_content)))))
          field: (struct_prop_pair
            name: (identifier)
            value: (expression
              expr: (primitive_value
                primitive: (number))))
          field: (struct_prop_pair
            name: (identifier)
            value: (expression
              expr: (primitive_value
                primitive: (boolean))))))))
  (statement
    (variable_definition
      binding: (variable_binding)
      name: (identifier)
      type: (type
        (list_type
          element_type: (type
            (identifier))))
      (assign)
      value: (expression
        expr: (list_value
          (expression
            expr: (identifier))
          (expression
            expr: (struct_instance
              name: (identifier)
              field: (struct_prop_pair
                name: (identifier)
                value: (expression
                  expr: (primitive_value
                    primitive: (string
                      chunk: (string_content)))))
              field: (struct_prop_pair
                name: (identifier)
                value: (expression
                  expr: (identifier)))
              field: (struct_prop_pair
                name: (identifier)
                value: (expression
                  expr: (primitive_value
                    primitive: (boolean)))))))))))

==================
struct methods
==================

impl (self: Person) {
  fn describe() Str {
    io::print("Name: {self.name}")
    io::print("Age: {self.age}")
    io::print("Employed: {self.employed}")
  }
}

impl (mut self: Person) {
  fn age() {
    self.age =+ 1
  }
}

---

(program
  (statement
    (implements_definition
      (parameters
        (param_def
          (identifier)
          (type
            (identifier))))
      (block
        (statement
          (function_definition
            (identifier)
            (parameters)
            (type
              (primitive_type
                (str)))
            (block
              (statement
                (expression
                  (member_access
                    (expression
                      (identifier))
                    (double_colon)
                    (function_call
                      (identifier)
                      (paren_arguments
                        (expression
                          (primitive_value
                            (string
                              (string_content)
                              (string_interpolation
                                (expression
                                  (member_access
                                    (expression
                                      (identifier))
                                    (period)
                                    (identifier))))))))))))
              (statement
                (expression
                  (member_access
                    (expression
                      (identifier))
                    (double_colon)
                    (function_call
                      (identifier)
                      (paren_arguments
                        (expression
                          (primitive_value
                            (string
                              (string_content)
                              (string_interpolation
                                (expression
                                  (member_access
                                    (expression
                                      (identifier))
                                    (period)
                                    (identifier))))))))))))
              (statement
                (expression
                  (member_access
                    (expression
                      (identifier))
                    (double_colon)
                    (function_call
                      (identifier)
                      (paren_arguments
                        (expression
                          (primitive_value
                            (string
                              (string_content)
                              (string_interpolation
                                (expression
                                  (member_access
                                    (expression
                                      (identifier))
                                    (period)
                                    (identifier))))))))))))))))))
  (statement
    (implements_definition
      (parameters
        (param_def
          (identifier)
          (type
            (identifier))))
      (block
        (statement
          (function_definition
            (identifier)
            (parameters)
            (block
              (statement
                (reassignment
                  (member_access
                    (expression
                      (identifier))
                    (period)
                    (identifier))
                  (increment)
                  (expression
                    (primitive_value
                      (number))))))))))))
